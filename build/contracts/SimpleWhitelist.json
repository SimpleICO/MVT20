{
  "contractName": "SimpleWhitelist",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addWhitelisted",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeWhitelisted",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "rate",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "weiRaised",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceWhitelistAdmin",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "wallet",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addWhitelistAdmin",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isWhitelistAdmin",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceWhitelisted",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "buyTokens",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "purchaser",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "WhitelistedAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "WhitelistedRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "WhitelistAdminAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "WhitelistAdminRemoved",
      "type": "event"
    }
  ],
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "pragma solidity >=0.4.21 <0.6.0;\n\nimport \"../node_modules/openzeppelin-solidity/contracts/crowdsale/validation/WhitelistCrowdsale.sol\";\n\ncontract SimpleWhitelist is WhitelistCrowdsale {}",
  "sourcePath": "/Users/GustavoIbarra/Projects/Solidity/SimpleWhitelist/contracts/SimpleWhitelist.sol",
  "ast": {
    "absolutePath": "/Users/GustavoIbarra/Projects/Solidity/SimpleWhitelist/contracts/SimpleWhitelist.sol",
    "exportedSymbols": {
      "SimpleWhitelist": [
        150
      ]
    },
    "id": 151,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 146,
        "literals": [
          "solidity",
          ">=",
          "0.4",
          ".21",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:32:2"
      },
      {
        "absolutePath": "/Users/GustavoIbarra/Projects/Solidity/SimpleWhitelist/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/WhitelistCrowdsale.sol",
        "file": "../node_modules/openzeppelin-solidity/contracts/crowdsale/validation/WhitelistCrowdsale.sol",
        "id": 147,
        "nodeType": "ImportDirective",
        "scope": 151,
        "sourceUnit": 754,
        "src": "34:101:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 148,
              "name": "WhitelistCrowdsale",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 753,
              "src": "165:18:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_WhitelistCrowdsale_$753",
                "typeString": "contract WhitelistCrowdsale"
              }
            },
            "id": 149,
            "nodeType": "InheritanceSpecifier",
            "src": "165:18:2"
          }
        ],
        "contractDependencies": [
          347,
          456,
          723,
          753,
          1615
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": false,
        "id": 150,
        "linearizedBaseContracts": [
          150,
          753,
          723,
          1615,
          456,
          347
        ],
        "name": "SimpleWhitelist",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 151,
        "src": "137:49:2"
      }
    ],
    "src": "0:186:2"
  },
  "legacyAST": {
    "absolutePath": "/Users/GustavoIbarra/Projects/Solidity/SimpleWhitelist/contracts/SimpleWhitelist.sol",
    "exportedSymbols": {
      "SimpleWhitelist": [
        150
      ]
    },
    "id": 151,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 146,
        "literals": [
          "solidity",
          ">=",
          "0.4",
          ".21",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:32:2"
      },
      {
        "absolutePath": "/Users/GustavoIbarra/Projects/Solidity/SimpleWhitelist/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/WhitelistCrowdsale.sol",
        "file": "../node_modules/openzeppelin-solidity/contracts/crowdsale/validation/WhitelistCrowdsale.sol",
        "id": 147,
        "nodeType": "ImportDirective",
        "scope": 151,
        "sourceUnit": 754,
        "src": "34:101:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 148,
              "name": "WhitelistCrowdsale",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 753,
              "src": "165:18:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_WhitelistCrowdsale_$753",
                "typeString": "contract WhitelistCrowdsale"
              }
            },
            "id": 149,
            "nodeType": "InheritanceSpecifier",
            "src": "165:18:2"
          }
        ],
        "contractDependencies": [
          347,
          456,
          723,
          753,
          1615
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": false,
        "id": 150,
        "linearizedBaseContracts": [
          150,
          753,
          723,
          1615,
          456,
          347
        ],
        "name": "SimpleWhitelist",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 151,
        "src": "137:49:2"
      }
    ],
    "src": "0:186:2"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.0+commit.1d4f565a.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.1",
  "updatedAt": "2019-01-23T22:37:03.733Z",
  "devdoc": {
    "methods": {
      "buyTokens(address)": {
        "details": "low level token purchase ***DO NOT OVERRIDE*** This function has a non-reentrancy guard, so it shouldn't be called by another `nonReentrant` function.",
        "params": {
          "beneficiary": "Recipient of the token purchase"
        }
      },
      "rate()": {
        "return": "the number of token units a buyer gets per wei."
      },
      "token()": {
        "return": "the token being sold."
      },
      "wallet()": {
        "return": "the address where funds are collected."
      },
      "weiRaised()": {
        "return": "the amount of wei raised."
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}